════════════════════════════════════════════════════════════════════════
                    東南亞金融新聞系統 - 資料流程分析
════════════════════════════════════════════════════════════════════════

當前架構（有問題）：
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌─────────────────────────────────────────────────────────────────┐
│  1. Research Agent (research_agent.py)                          │
│     ┌──────────────────────────────────────────┐                │
│     │  輸入: 用戶查詢 "新加坡股市動態"          │                │
│     └──────────────────────────────────────────┘                │
│                      ↓                                           │
│     ┌──────────────────────────────────────────┐                │
│     │  OpenAI Agent + DuckDuckGo Tools         │                │
│     │  - 搜尋相關新聞                          │                │
│     │  - Prompt 要求返回 JSON ❌ (未生效)     │                │
│     └──────────────────────────────────────────┘                │
│                      ↓                                           │
│     ┌──────────────────────────────────────────┐                │
│     │  輸出: Dict[str, Any]                    │                │
│     │  {                                       │                │
│     │    "status": "success",                  │                │
│     │    "query": "...",                       │                │
│     │    "content": "Markdown 文字..." ✅      │                │
│     │  }                                       │                │
│     └──────────────────────────────────────────┘                │
└─────────────────────────────────────────────────────────────────┘
                      ↓
┌─────────────────────────────────────────────────────────────────┐
│  2. Analyst Agent (analyst_agent.py)                            │
│     ┌──────────────────────────────────────────┐                │
│     │  輸入: search_results["content"]         │                │
│     │        (Markdown 文字)                   │                │
│     └──────────────────────────────────────────┘                │
│                      ↓                                           │
│     ┌──────────────────────────────────────────┐                │
│     │  OpenAI Agent                            │                │
│     │  - 整理和結構化資訊                      │                │
│     │  - 生成專業報告格式                      │                │
│     │  - 使用 Markdown 格式 ✅                │                │
│     └──────────────────────────────────────────┘                │
│                      ↓                                           │
│     ┌──────────────────────────────────────────┐                │
│     │  輸出: Markdown 文字                     │                │
│     │  # 東南亞金融新聞報告                    │                │
│     │  ## 報告摘要                             │                │
│     │  本報告涵蓋...                           │                │
│     │  ## 新聞詳情                             │                │
│     │  ### 1. 新聞標題                         │                │
│     │  - **來源**: [Link](URL)                 │                │
│     └──────────────────────────────────────────┘                │
└─────────────────────────────────────────────────────────────────┘
                      ↓
┌─────────────────────────────────────────────────────────────────┐
│  3. Report Generator Agent (report_agent.py) ❌ 問題在這裡      │
│     ┌──────────────────────────────────────────┐                │
│     │  輸入: Markdown 文字                     │                │
│     └──────────────────────────────────────────┘                │
│                      ↓                                           │
│     ┌──────────────────────────────────────────┐                │
│     │  _parse_markdown_to_story()              │                │
│     │  ❌ 問題:                                 │                │
│     │  - import markdown (未使用)              │                │
│     │  - 使用簡單字符串匹配                    │                │
│     │  - lines = content.split('\n')           │                │
│     │  - if line.startswith('# '):             │                │
│     │  - elif line.startswith('## '):          │                │
│     │  - 無法處理複雜格式                      │                │
│     └──────────────────────────────────────────┘                │
│                      ↓                                           │
│     ┌──────────────────────────────────────────┐                │
│     │  ReportLab PDF                           │                │
│     │  ⚠️  格式不完整                          │                │
│     │  - 基本標題 ✅                           │                │
│     │  - 粗體/斜體 ❌                          │                │
│     │  - 連結 ⚠️ (部分處理)                    │                │
│     │  - 列表 ✅                               │                │
│     │  - 中文字體 ⚠️                           │                │
│     └──────────────────────────────────────────┘                │
└─────────────────────────────────────────────────────────────────┘


改進後架構（推薦方案A）：
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌─────────────────────────────────────────────────────────────────┐
│  1. Research Agent (research_agent.py) - 不變                   │
│     輸出: {"status": "success", "content": "Markdown..."}       │
└─────────────────────────────────────────────────────────────────┘
                      ↓
┌─────────────────────────────────────────────────────────────────┐
│  2. Analyst Agent (analyst_agent.py) - 不變                     │
│     輸出: Markdown 文字                                         │
└─────────────────────────────────────────────────────────────────┘
                      ↓
┌─────────────────────────────────────────────────────────────────┐
│  3. Report Generator Agent (report_agent.py) ✅ 改進            │
│     ┌──────────────────────────────────────────┐                │
│     │  輸入: Markdown 文字                     │                │
│     └──────────────────────────────────────────┘                │
│                      ↓                                           │
│     ┌──────────────────────────────────────────┐                │
│     │  Step 1: Markdown → HTML                 │                │
│     │  ✅ 使用 markdown.markdown()             │                │
│     │  html = markdown.markdown(               │                │
│     │      content,                            │                │
│     │      extensions=['extra', 'nl2br']       │                │
│     │  )                                       │                │
│     └──────────────────────────────────────────┘                │
│                      ↓                                           │
│     ┌──────────────────────────────────────────┐                │
│     │  Step 2: HTML → ReportLab 元素           │                │
│     │  ✅ 使用 BeautifulSoup/HTMLParser        │                │
│     │  soup = BeautifulSoup(html)              │                │
│     │  for tag in soup.descendants:            │                │
│     │      if tag.name == 'h1':                │                │
│     │          → Paragraph(CustomTitle)        │                │
│     │      elif tag.name == 'strong':          │                │
│     │          → <b>text</b>                   │                │
│     │      elif tag.name == 'a':               │                │
│     │          → <link href="...">text</link>  │                │
│     └──────────────────────────────────────────┘                │
│                      ↓                                           │
│     ┌──────────────────────────────────────────┐                │
│     │  Step 3: 生成 PDF                        │                │
│     │  ✅ 完整格式支援                         │                │
│     │  - 標題 (H1, H2, H3) ✅                  │                │
│     │  - 粗體/斜體 ✅                          │                │
│     │  - 連結 ✅                               │                │
│     │  - 列表 (有序/無序) ✅                   │                │
│     │  - 中文字體 ✅                           │                │
│     └──────────────────────────────────────────┘                │
└─────────────────────────────────────────────────────────────────┘


替代方案B（JSON 數據流）：
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌─────────────────────────────────────────────────────────────────┐
│  1. Research Agent                                              │
│     輸出: JSON 結構化數據                                       │
│     {                                                           │
│       "results": [                                              │
│         {                                                       │
│           "title": "...",                                       │
│           "summary": "...",                                     │
│           "url": "...",                                         │
│           "date": "..."                                         │
│         }                                                       │
│       ]                                                         │
│     }                                                           │
└─────────────────────────────────────────────────────────────────┘
                      ↓
┌─────────────────────────────────────────────────────────────────┐
│  2. Analyst Agent                                               │
│     輸入: JSON 數據                                             │
│     處理: 分析和豐富數據                                        │
│     輸出: 增強的 JSON 數據                                      │
│     {                                                           │
│       "summary": "...",                                         │
│       "insights": [...],                                        │
│       "news": [...]                                             │
│     }                                                           │
└─────────────────────────────────────────────────────────────────┘
                      ↓
┌─────────────────────────────────────────────────────────────────┐
│  3. Report Generator Agent                                      │
│     輸入: JSON 數據                                             │
│     處理: 直接從 JSON 生成 PDF 元素                             │
│     優點:                                                       │
│     - ✅ 精確控制格式                                           │
│     - ✅ 不需要解析 Markdown                                    │
│     缺點:                                                       │
│     - ❌ 需要修改 3 個 Agent                                    │
│     - ❌ 失去 AI 自然語言生成優勢                               │
└─────────────────────────────────────────────────────────────────┘


關鍵代碼位置：
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📁 agents/report_agent.py

Line 8:   import markdown  ❌ 導入但未使用
Line 170: def _parse_markdown_to_story()  ❌ 問題函數
Line 176:     lines = markdown_content.split('\n')  ❌ 簡單分割
Line 183:     if line.startswith('# '):  ❌ 字符串匹配
Line 189:     elif line.startswith('## '):  ❌ 字符串匹配
Line 195:     elif line.startswith('### '):  ❌ 字符串匹配
Line 223: def _clean_markdown()  ⚠️  正則表達式，有限支援
Line 238: def _clean_markdown_links()  ⚠️  基本連結處理


需要修改的代碼：
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

修改前 (Line 170-221):
def _parse_markdown_to_story(self, markdown_content: str):
    story = []
    lines = markdown_content.split('\n')  # ❌
    for line in lines:
        if line.startswith('# '):  # ❌
            # ...

修改後:
def _parse_markdown_to_story(self, markdown_content: str):
    # ✅ 使用 markdown 庫
    html = markdown.markdown(
        markdown_content,
        extensions=['extra', 'nl2br', 'sane_lists']
    )
    
    # ✅ 解析 HTML
    soup = BeautifulSoup(html, 'html.parser')
    story = []
    
    # ✅ 遍歷 HTML 元素
    for element in soup.descendants:
        if element.name == 'h1':
            story.append(Paragraph(element.text, self.styles['CustomTitle']))
        elif element.name == 'h2':
            story.append(Paragraph(element.text, self.styles['CustomHeading2']))
        # ... 更多標籤處理


總結：
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ 應該用 JSON 的地方：
   - 配置文件
   - Agent 之間傳遞結構化數據（可選）
   - 如果需要複雜的數據驗證

✅ 應該用 Python 處理 Markdown 的地方：
   - report_agent.py (主要修改點)
   - 使用 markdown 庫將 Markdown → HTML
   - 使用 BeautifulSoup 將 HTML → ReportLab 元素

⚠️  當前問題：
   - markdown 庫已導入但未使用
   - 使用簡單字符串匹配替代正確的解析
   - 結果：PDF 格式不完整

🎯 推薦方案：
   方案 A - 改進 report_agent.py 的 Markdown 解析
   - 最小修改
   - 最大效益
   - 保持現有架構

════════════════════════════════════════════════════════════════════════
